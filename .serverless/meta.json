{
  "C:\\DEV\\NodeJS\\BackendNodeJSAWS\\lambda-get": {
    "versionSfCore": null,
    "versionFramework": "4.4.4",
    "isWithinCompose": false,
    "isCompose": false,
    "composeOrgName": null,
    "composeResolverProviders": {
      "default-aws-credential-resolver": "<REDACTED>"
    },
    "composeServiceName": null,
    "servicePath": "C:\\DEV\\NodeJS\\BackendNodeJSAWS\\lambda-get",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "lambda-get",
      "provider": {
        "name": "aws",
        "runtime": "nodejs18.x",
        "stage": "dev",
        "region": "us-east-1",
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "GetPeopleApiLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/lambda-get-dev-getPeopleApi"
              }
            },
            "GetPeopleApiByIdLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/lambda-get-dev-getPeopleApiById"
              }
            },
            "GetPlanetApiLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/lambda-get-dev-getPlanetApi"
              }
            },
            "GetPlanetApiByIdLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/lambda-get-dev-getPlanetApiById"
              }
            },
            "GetVehicleLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/lambda-get-dev-getVehicle"
              }
            },
            "GetVehicleByIdLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/lambda-get-dev-getVehicleById"
              }
            },
            "GetSpecieLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/lambda-get-dev-getSpecie"
              }
            },
            "GetSpecieByIdLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/lambda-get-dev-getSpecieById"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "lambda-get",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/lambda-get-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/lambda-get-dev*:*:*"
                            }
                          ]
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "lambda-get",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "GetPeopleApiLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-25f59da2-0c72",
                  "S3Key": "serverless/lambda-get/dev/1728302347494-2024-10-07T11:59:07.494Z/lambda-get.zip"
                },
                "Handler": "src/handlers/peopleHandler.getPeopleApi",
                "Runtime": "nodejs18.x",
                "FunctionName": "lambda-get-dev-getPeopleApi",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "NODE_OPTIONS": "--enable-source-maps"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetPeopleApiLogGroup"
              ]
            },
            "GetPeopleApiByIdLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-25f59da2-0c72",
                  "S3Key": "serverless/lambda-get/dev/1728302347494-2024-10-07T11:59:07.494Z/lambda-get.zip"
                },
                "Handler": "src/handlers/peopleHandler.getPeopleApiById",
                "Runtime": "nodejs18.x",
                "FunctionName": "lambda-get-dev-getPeopleApiById",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "NODE_OPTIONS": "--enable-source-maps"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetPeopleApiByIdLogGroup"
              ]
            },
            "GetPlanetApiLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-25f59da2-0c72",
                  "S3Key": "serverless/lambda-get/dev/1728302347494-2024-10-07T11:59:07.494Z/lambda-get.zip"
                },
                "Handler": "src/handlers/planetHandler.getPlanetApi",
                "Runtime": "nodejs18.x",
                "FunctionName": "lambda-get-dev-getPlanetApi",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "NODE_OPTIONS": "--enable-source-maps"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetPlanetApiLogGroup"
              ]
            },
            "GetPlanetApiByIdLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-25f59da2-0c72",
                  "S3Key": "serverless/lambda-get/dev/1728302347494-2024-10-07T11:59:07.494Z/lambda-get.zip"
                },
                "Handler": "src/handlers/planetHandler.getPlanetApiById",
                "Runtime": "nodejs18.x",
                "FunctionName": "lambda-get-dev-getPlanetApiById",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "NODE_OPTIONS": "--enable-source-maps"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetPlanetApiByIdLogGroup"
              ]
            },
            "GetVehicleLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-25f59da2-0c72",
                  "S3Key": "serverless/lambda-get/dev/1728302347494-2024-10-07T11:59:07.494Z/lambda-get.zip"
                },
                "Handler": "src/handlers/vehicleHandler.getVehicle",
                "Runtime": "nodejs18.x",
                "FunctionName": "lambda-get-dev-getVehicle",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "NODE_OPTIONS": "--enable-source-maps"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetVehicleLogGroup"
              ]
            },
            "GetVehicleByIdLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-25f59da2-0c72",
                  "S3Key": "serverless/lambda-get/dev/1728302347494-2024-10-07T11:59:07.494Z/lambda-get.zip"
                },
                "Handler": "src/handlers/vehicleHandler.getVehicleById",
                "Runtime": "nodejs18.x",
                "FunctionName": "lambda-get-dev-getVehicleById",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "NODE_OPTIONS": "--enable-source-maps"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetVehicleByIdLogGroup"
              ]
            },
            "GetSpecieLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-25f59da2-0c72",
                  "S3Key": "serverless/lambda-get/dev/1728302347494-2024-10-07T11:59:07.494Z/lambda-get.zip"
                },
                "Handler": "src/handlers/specieHandler.getSpecie",
                "Runtime": "nodejs18.x",
                "FunctionName": "lambda-get-dev-getSpecie",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "NODE_OPTIONS": "--enable-source-maps"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetSpecieLogGroup"
              ]
            },
            "GetSpecieByIdLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-25f59da2-0c72",
                  "S3Key": "serverless/lambda-get/dev/1728302347494-2024-10-07T11:59:07.494Z/lambda-get.zip"
                },
                "Handler": "src/handlers/specieHandler.getSpecieById",
                "Runtime": "nodejs18.x",
                "FunctionName": "lambda-get-dev-getSpecieById",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "NODE_OPTIONS": "--enable-source-maps"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetSpecieByIdLogGroup"
              ]
            },
            "GetPeopleApiLambdaVersion0e6yRsiErtjZAMgBfWJSJ47FJ21kHY1fB43RDNE9vU": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetPeopleApiLambdaFunction"
                },
                "CodeSha256": "zWuX5ItFDL4VqolO7rctSfvz/DHAvL0wqBgtmloEDG8="
              }
            },
            "GetPeopleApiByIdLambdaVersion2aotSDNl7BdjGFBuS5sgBHiR4flvEoAs0qsOfTbiI": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetPeopleApiByIdLambdaFunction"
                },
                "CodeSha256": "zWuX5ItFDL4VqolO7rctSfvz/DHAvL0wqBgtmloEDG8="
              }
            },
            "GetPlanetApiLambdaVersion7bLTmqWOdvryHJASK3OjgJRszi54URUKkaBxgQ": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetPlanetApiLambdaFunction"
                },
                "CodeSha256": "zWuX5ItFDL4VqolO7rctSfvz/DHAvL0wqBgtmloEDG8="
              }
            },
            "GetPlanetApiByIdLambdaVersion6c3PnEqg8QQAicqMtrFhP2hLsagO1sTUZwAEfblEU4": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetPlanetApiByIdLambdaFunction"
                },
                "CodeSha256": "zWuX5ItFDL4VqolO7rctSfvz/DHAvL0wqBgtmloEDG8="
              }
            },
            "GetVehicleLambdaVersionok45X1pKaiOCsoxsSCrRFvggZXiG7xfUjY0lGpzuY": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetVehicleLambdaFunction"
                },
                "CodeSha256": "zWuX5ItFDL4VqolO7rctSfvz/DHAvL0wqBgtmloEDG8="
              }
            },
            "GetVehicleByIdLambdaVersionmxMa1AGdnTyyv0xgYaCPLBAL5M8vHuqApjy3znVQwA": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetVehicleByIdLambdaFunction"
                },
                "CodeSha256": "zWuX5ItFDL4VqolO7rctSfvz/DHAvL0wqBgtmloEDG8="
              }
            },
            "GetSpecieLambdaVersionAL2cmoRz0Y9S1AJlGZ4JmSEtaxwhpxM3TzsbTIxU": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetSpecieLambdaFunction"
                },
                "CodeSha256": "zWuX5ItFDL4VqolO7rctSfvz/DHAvL0wqBgtmloEDG8="
              }
            },
            "GetSpecieByIdLambdaVersionxt4kbzKVR8L4VeddrUd1EinmhilSJR1LyNO38": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetSpecieByIdLambdaFunction"
                },
                "CodeSha256": "zWuX5ItFDL4VqolO7rctSfvz/DHAvL0wqBgtmloEDG8="
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "dev-lambda-get",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourcePeople": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "people",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourcePeopleIdVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourcePeople"
                },
                "PathPart": "{id}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourcePlanet": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "planet",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourcePlanetIdVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourcePlanet"
                },
                "PathPart": "{id}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceVehicle": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "vehicle",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceVehicleIdVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceVehicle"
                },
                "PathPart": "{id}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceSpecie": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "specie",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceSpecieIdVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceSpecie"
                },
                "PathPart": "{id}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodPeopleOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePeople"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodPeopleIdVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePeopleIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodPlanetOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePlanet"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodPlanetIdVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePlanetIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodVehicleOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceVehicle"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodVehicleIdVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceVehicleIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodSpecieOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceSpecie"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodSpecieIdVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceSpecieIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodPeopleGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePeople"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetPeopleApiLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetPeopleApiLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodPeopleIdVarGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePeopleIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetPeopleApiByIdLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetPeopleApiByIdLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodPlanetGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePlanet"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetPlanetApiLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetPlanetApiLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodPlanetIdVarGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePlanetIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetPlanetApiByIdLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetPlanetApiByIdLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodVehicleGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceVehicle"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetVehicleLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetVehicleLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodVehicleIdVarGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceVehicleIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetVehicleByIdLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetVehicleByIdLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodSpecieGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceSpecie"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetSpecieLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetSpecieLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodSpecieIdVarGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceSpecieIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetSpecieByIdLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetSpecieByIdLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayDeployment1728302343158": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodPeopleOptions",
                "ApiGatewayMethodPeopleIdVarOptions",
                "ApiGatewayMethodPlanetOptions",
                "ApiGatewayMethodPlanetIdVarOptions",
                "ApiGatewayMethodVehicleOptions",
                "ApiGatewayMethodVehicleIdVarOptions",
                "ApiGatewayMethodSpecieOptions",
                "ApiGatewayMethodSpecieIdVarOptions",
                "ApiGatewayMethodPeopleGet",
                "ApiGatewayMethodPeopleIdVarGet",
                "ApiGatewayMethodPlanetGet",
                "ApiGatewayMethodPlanetIdVarGet",
                "ApiGatewayMethodVehicleGet",
                "ApiGatewayMethodVehicleIdVarGet",
                "ApiGatewayMethodSpecieGet",
                "ApiGatewayMethodSpecieIdVarGet"
              ]
            },
            "GetPeopleApiLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetPeopleApiLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetPeopleApiByIdLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetPeopleApiByIdLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetPlanetApiLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetPlanetApiLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetPlanetApiByIdLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetPlanetApiByIdLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetVehicleLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetVehicleLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetVehicleByIdLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetVehicleByIdLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetSpecieLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetSpecieLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetSpecieByIdLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetSpecieByIdLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-us-east-1-25f59da2-0c72",
              "Export": {
                "Name": "sls-lambda-get-dev-ServerlessDeploymentBucketName"
              }
            },
            "GetPeopleApiLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetPeopleApiLambdaVersion0e6yRsiErtjZAMgBfWJSJ47FJ21kHY1fB43RDNE9vU"
              },
              "Export": {
                "Name": "sls-lambda-get-dev-GetPeopleApiLambdaFunctionQualifiedArn"
              }
            },
            "GetPeopleApiByIdLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetPeopleApiByIdLambdaVersion2aotSDNl7BdjGFBuS5sgBHiR4flvEoAs0qsOfTbiI"
              },
              "Export": {
                "Name": "sls-lambda-get-dev-GetPeopleApiByIdLambdaFunctionQualifiedArn"
              }
            },
            "GetPlanetApiLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetPlanetApiLambdaVersion7bLTmqWOdvryHJASK3OjgJRszi54URUKkaBxgQ"
              },
              "Export": {
                "Name": "sls-lambda-get-dev-GetPlanetApiLambdaFunctionQualifiedArn"
              }
            },
            "GetPlanetApiByIdLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetPlanetApiByIdLambdaVersion6c3PnEqg8QQAicqMtrFhP2hLsagO1sTUZwAEfblEU4"
              },
              "Export": {
                "Name": "sls-lambda-get-dev-GetPlanetApiByIdLambdaFunctionQualifiedArn"
              }
            },
            "GetVehicleLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetVehicleLambdaVersionok45X1pKaiOCsoxsSCrRFvggZXiG7xfUjY0lGpzuY"
              },
              "Export": {
                "Name": "sls-lambda-get-dev-GetVehicleLambdaFunctionQualifiedArn"
              }
            },
            "GetVehicleByIdLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetVehicleByIdLambdaVersionmxMa1AGdnTyyv0xgYaCPLBAL5M8vHuqApjy3znVQwA"
              },
              "Export": {
                "Name": "sls-lambda-get-dev-GetVehicleByIdLambdaFunctionQualifiedArn"
              }
            },
            "GetSpecieLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetSpecieLambdaVersionAL2cmoRz0Y9S1AJlGZ4JmSEtaxwhpxM3TzsbTIxU"
              },
              "Export": {
                "Name": "sls-lambda-get-dev-GetSpecieLambdaFunctionQualifiedArn"
              }
            },
            "GetSpecieByIdLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetSpecieByIdLambdaVersionxt4kbzKVR8L4VeddrUd1EinmhilSJR1LyNO38"
              },
              "Export": {
                "Name": "sls-lambda-get-dev-GetSpecieByIdLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-lambda-get-dev-ServiceEndpoint"
              }
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "getPeopleApi": {
          "handler": "src/handlers/peopleHandler.getPeopleApi",
          "events": [
            {
              "http": {
                "path": "people",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "lambda-get-dev-getPeopleApi",
          "environment": {
            "NODE_OPTIONS": "--enable-source-maps"
          },
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "GetPeopleApiLambdaVersion0e6yRsiErtjZAMgBfWJSJ47FJ21kHY1fB43RDNE9vU"
        },
        "getPeopleApiById": {
          "handler": "src/handlers/peopleHandler.getPeopleApiById",
          "events": [
            {
              "http": {
                "path": "people/{id}",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "lambda-get-dev-getPeopleApiById",
          "environment": {
            "NODE_OPTIONS": "--enable-source-maps"
          },
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "GetPeopleApiByIdLambdaVersion2aotSDNl7BdjGFBuS5sgBHiR4flvEoAs0qsOfTbiI"
        },
        "getPlanetApi": {
          "handler": "src/handlers/planetHandler.getPlanetApi",
          "events": [
            {
              "http": {
                "path": "planet",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "lambda-get-dev-getPlanetApi",
          "environment": {
            "NODE_OPTIONS": "--enable-source-maps"
          },
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "GetPlanetApiLambdaVersion7bLTmqWOdvryHJASK3OjgJRszi54URUKkaBxgQ"
        },
        "getPlanetApiById": {
          "handler": "src/handlers/planetHandler.getPlanetApiById",
          "events": [
            {
              "http": {
                "path": "planet/{id}",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "lambda-get-dev-getPlanetApiById",
          "environment": {
            "NODE_OPTIONS": "--enable-source-maps"
          },
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "GetPlanetApiByIdLambdaVersion6c3PnEqg8QQAicqMtrFhP2hLsagO1sTUZwAEfblEU4"
        },
        "getVehicle": {
          "handler": "src/handlers/vehicleHandler.getVehicle",
          "events": [
            {
              "http": {
                "path": "vehicle",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "lambda-get-dev-getVehicle",
          "environment": {
            "NODE_OPTIONS": "--enable-source-maps"
          },
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "GetVehicleLambdaVersionok45X1pKaiOCsoxsSCrRFvggZXiG7xfUjY0lGpzuY"
        },
        "getVehicleById": {
          "handler": "src/handlers/vehicleHandler.getVehicleById",
          "events": [
            {
              "http": {
                "path": "vehicle/{id}",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "lambda-get-dev-getVehicleById",
          "environment": {
            "NODE_OPTIONS": "--enable-source-maps"
          },
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "GetVehicleByIdLambdaVersionmxMa1AGdnTyyv0xgYaCPLBAL5M8vHuqApjy3znVQwA"
        },
        "getSpecie": {
          "handler": "src/handlers/specieHandler.getSpecie",
          "events": [
            {
              "http": {
                "path": "specie",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "lambda-get-dev-getSpecie",
          "environment": {
            "NODE_OPTIONS": "--enable-source-maps"
          },
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "GetSpecieLambdaVersionAL2cmoRz0Y9S1AJlGZ4JmSEtaxwhpxM3TzsbTIxU"
        },
        "getSpecieById": {
          "handler": "src/handlers/specieHandler.getSpecieById",
          "events": [
            {
              "http": {
                "path": "specie/{id}",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "lambda-get-dev-getSpecieById",
          "environment": {
            "NODE_OPTIONS": "--enable-source-maps"
          },
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "GetSpecieByIdLambdaVersionxt4kbzKVR8L4VeddrUd1EinmhilSJR1LyNO38"
        }
      }
    },
    "serviceRawFile": "service: lambda-get\r\n\r\nprovider:\r\n  name: aws\r\n  runtime: nodejs18.x\r\n  stage: dev\r\n  region: us-east-1\r\n\r\nfunctions:\r\n  getPeopleApi:\r\n    handler: src/handlers/peopleHandler.getPeopleApi\r\n    events:\r\n      - http:\r\n          path: people\r\n          method: GET\r\n          cors: true\r\n  getPeopleApiById:\r\n    handler: src/handlers/peopleHandler.getPeopleApiById\r\n    events:\r\n      - http:\r\n          path: people/{id}\r\n          method: GET\r\n          cors: true\r\n  getPlanetApi:\r\n    handler: src/handlers/planetHandler.getPlanetApi\r\n    events:\r\n      - http:\r\n          path: planet\r\n          method: GET\r\n          cors: true\r\n  getPlanetApiById:\r\n    handler: src/handlers/planetHandler.getPlanetApiById\r\n    events:\r\n      - http:\r\n          path: planet/{id}\r\n          method: GET\r\n          cors: true\r\n  getVehicle:\r\n    handler: src/handlers/vehicleHandler.getVehicle\r\n    events:\r\n      - http:\r\n          path: vehicle\r\n          method: GET\r\n          cors: true\r\n  getVehicleById:\r\n    handler: src/handlers/vehicleHandler.getVehicleById\r\n    events:\r\n      - http:\r\n          path: vehicle/{id}\r\n          method: GET\r\n          cors: true\r\n  getSpecie:\r\n    handler: src/handlers/specieHandler.getSpecie\r\n    events:\r\n      - http:\r\n          path: specie\r\n          method: GET\r\n          cors: true\r\n  getSpecieById:\r\n    handler: src/handlers/specieHandler.getSpecieById\r\n    events:\r\n      - http:\r\n          path: specie/{id}\r\n          method: GET\r\n          cors: true\r\n",
    "command": [
      "deploy"
    ],
    "options": {},
    "error": null,
    "params": {},
    "machineId": "3de23c3f15a6a92d40849857d6a712de",
    "stage": "dev",
    "accessKeyV2": "<REDACTED>",
    "accessKeyV1": "<REDACTED>",
    "orgId": "ef03eb6e-5d7f-4340-b0d0-582ec88d55a1",
    "orgName": "ksanchez240715",
    "userId": "HFxkgDtB32p26FGysc",
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "userName": "ksanchez240715",
    "subscription": null,
    "userEmail": "ksanchez240715@gmail.com",
    "serviceProviderAwsRegion": "us-east-1",
    "serviceProviderAwsCredentials": "<REDACTED>",
    "serviceProviderAwsAccountId": "430118854729",
    "projectType": "traditional",
    "versionSf": "4.4.4",
    "serviceProviderAwsCfStackName": "lambda-get-dev",
    "integrations": {},
    "serviceUniqueId": "arn:aws:cloudformation:us-east-1:430118854729:stack/lambda-get-dev/31dbc160-846a-11ef-a0eb-0e3b23bfaf07",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-1:430118854729:stack/lambda-get-dev/31dbc160-846a-11ef-a0eb-0e3b23bfaf07",
    "serviceProviderAwsCfStackCreated": "2024-10-07T05:08:31.127Z",
    "serviceProviderAwsCfStackUpdated": "2024-10-07T11:59:16.536Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "GetVehicleByIdLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:430118854729:function:lambda-get-dev-getVehicleById:4",
        "Description": "Current Lambda function version",
        "ExportName": "sls-lambda-get-dev-GetVehicleByIdLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetPeopleApiLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:430118854729:function:lambda-get-dev-getPeopleApi:12",
        "Description": "Current Lambda function version",
        "ExportName": "sls-lambda-get-dev-GetPeopleApiLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetPlanetApiLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:430118854729:function:lambda-get-dev-getPlanetApi:11",
        "Description": "Current Lambda function version",
        "ExportName": "sls-lambda-get-dev-GetPlanetApiLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetPeopleApiByIdLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:430118854729:function:lambda-get-dev-getPeopleApiById:9",
        "Description": "Current Lambda function version",
        "ExportName": "sls-lambda-get-dev-GetPeopleApiByIdLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetPlanetApiByIdLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:430118854729:function:lambda-get-dev-getPlanetApiById:9",
        "Description": "Current Lambda function version",
        "ExportName": "sls-lambda-get-dev-GetPlanetApiByIdLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetVehicleLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:430118854729:function:lambda-get-dev-getVehicle:4",
        "Description": "Current Lambda function version",
        "ExportName": "sls-lambda-get-dev-GetVehicleLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetSpecieByIdLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:430118854729:function:lambda-get-dev-getSpecieById:4",
        "Description": "Current Lambda function version",
        "ExportName": "sls-lambda-get-dev-GetSpecieByIdLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetSpecieLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:430118854729:function:lambda-get-dev-getSpecie:4",
        "Description": "Current Lambda function version",
        "ExportName": "sls-lambda-get-dev-GetSpecieLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://0r7fad1g45.execute-api.us-east-1.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-lambda-get-dev-ServiceEndpoint"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-us-east-1-25f59da2-0c72",
        "ExportName": "sls-lambda-get-dev-ServerlessDeploymentBucketName"
      }
    ]
  }
}